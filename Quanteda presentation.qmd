---
title: "How we met Quanteda"
subtitle: "Analyzing the TV show 'How I Met Your Mother' with quanteda "
author: 
  - name: Jorge Roa
  - name: Augusto Fonseca
  - name: Alexander Kraess
margin-header: hertie_logo.png
opts_chunk: 
  R.options:
        width: 10
#title-slide-attributes: 
#  data-background-size: 10%
#  data-background-position: 100% 100%
#  data-background-image: HCC-HD.png
format:
    revealjs:
      title-slide-attributes: 
       data-background-image: images/quanteda.svg
       data-background-size: 15%
       data-background-position: 2% 2%
      slide-number: c/t
      multiplex: true
      width: 1600
      height: 680
      logo: images/hertie_logo.png
      footer: "[Text analysis with quanteda](https://rstudio-conf-2022.github.io/get-started-quarto/)"
      css: [assets/syntax-highlight.css, assets/custom.css, assets/pacman.css]
      transition: fade
      transition-speed: fast
      margin-bottom: 1px
      theme: default
      echo: true

      #{style="float:right;text-align:right;"} For specific
      
---
## Packages for the analysis

```{r}
#| class-source:  height_chunk
#| classes:  height_chunk
library(tidyverse)
library(quanteda)
library(rvest)
library(quanteda.textstats)
library(quanteda.textplots)
library(stringr)
library(spacyr)
library(xml2)
library(ggsci)
```




## Webscrapp Tv Show
:::::::::::::: {.columns}
::: {.column width="50%"}



```{r}
#| class-source:  height_chunk2
#| classes:  height_chunk2
#| code-fold: true


url_himym <- "https://en.wikipedia.org/wiki/List_of_How_I_Met_Your_Mother_episodes"

url_himym_characters <- "https://en.wikipedia.org/wiki/List_of_How_I_Met_Your_Mother_characters"

l_tables_himym <- url_himym %>% 
                   read_html() %>% 
                   html_nodes("table") %>% 
                   html_table(fill = TRUE)

#This generates a list with all the tables that contain the page. In our case, 
#we want the table from the second element till the 10th. 
l_tables_himym <- l_tables_himym[c(2:10)]

#Reduce the list in one data frame since all of the tables share the same structure 
df_himym <- data.frame(Reduce(bind_rows, l_tables_himym)) 

#We do the same for the characters of HIMYM
l_tables_himym_characters <- url_himym_characters %>% 
                             read_html() %>% 
                             html_nodes("table") %>% 
                             html_table(fill = TRUE)

df_characters <- as.data.frame(l_tables_himym_characters[[1]]) %>% 
                 select(Character)

df_characters_w <- df_characters %>% 
  filter(!stringr::str_starts(Character, "Futu"),
         !(Character %in% c("Character", "Main Characters", "Supporting Characters"))) %>% 
  mutate(name = str_extract(Character,"([^ ]+)"),
         name = replace(name, name == "Dr.", "Sonya"))
```
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
:::
::: {.column width="50%"}
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
Data cleaning to obtain clean tables
```{r}
#| class-source:  height_chunk3
#| classes:  height_chunk3
#| code-fold: true


#Reduce the list in one data frame since all of the tables share the same structure 
df_himym <- data.frame(Reduce(bind_rows, l_tables_himym)) 


#We do the same for the characters of HIMYM
l_tables_himym_characters <- url_himym_characters %>% 
                             read_html() %>% 
                             html_nodes("table") %>% 
                             html_table(fill = TRUE)


df_characters <- as.data.frame(l_tables_himym_characters[[1]]) %>% 
                 select(Character)


df_characters_w <- df_characters %>% 
  filter(!stringr::str_starts(Character, "Futu"),
         !(Character %in% c("Character", "Main Characters", "Supporting Characters"))) %>% 
  mutate(name = str_extract(Character,"([^ ]+)"),
         name = replace(name, name == "Dr.", "Sonya"))
```

:::
::::::::::::::
## Data cleaning two

```{r}
#| class-source:  height_chunk3
#| classes:  height_chunk3
#| code-fold: true

#Reduce the list in one data frame since all of the tables share the same structure 
df_himym <- data.frame(Reduce(bind_rows, l_tables_himym)) 

df_himym_filt <- df_himym %>% filter(str_length(No.overall) < 4)

df_himym_filt_dupl <- df_himym %>% filter(str_length(No.overall) > 4)

df_himym_filt_dupl_1 <- df_himym_filt_dupl %>% 
  mutate(No.overall = as.numeric(replace(No.overall, str_length(No.overall) > 4, substr(No.overall, 1, 3))),
        No..inseason = as.numeric(replace(No..inseason, str_length(No..inseason) > 3, substr(No..inseason, 1, 2))),
        Prod.code = replace (Prod.code, str_length(Prod.code) > 3, substr(Prod.code, 1, 6)))

df_himym_filt_dupl_2 <- df_himym_filt_dupl %>% 
  mutate(No.overall = as.numeric(replace(No.overall, str_length(No.overall) > 4, substr(No.overall, 4, 6))),
         No..inseason = as.numeric(replace(No..inseason, str_length(No..inseason) > 3, substr(No..inseason, 3, 4))),
         Title = replace(Title, Title == "\"The Magician's Code\"", "\"The Magician's Code Part 2\""),
         Title = replace(Title, Title == "\"The Final Page\"", "\"The Final Page Part 2\""),
         Title = replace(Title, Title == "\"Last Forever\"" , "\"Last Forever Part 2\"" ),
         Prod.code = replace(Prod.code, str_length(Prod.code) > 3, substr(Prod.code, 7, 12)))

df_himym_final <- bind_rows(df_himym_filt, 
                            df_himym_filt_dupl_1, 
                            df_himym_filt_dupl_2) %>% 
  arrange(No.overall, No..inseason) %>% 
  mutate(year = str_extract(Original.air.date, '[0-9]{4}+'),
         Season = as.numeric(stringr::str_extract(Prod.code, "^.{1}"))) %>% 
  rename(Chapter = No..inseason)

df_himym_final$US.viewers.millions. <- as.numeric(str_replace_all(df_himym_final$US.viewers.millions., "\\[[0-9]+\\]", ""))

datalist_himym <- readtext::readtext("texts/how-i-met-your-mother/*.txt")

v_season <- as.numeric(stringr::str_extract(datalist_himym$doc_id, "\\d+"))

v_chapter <- as.numeric(stringi::stri_extract_last_regex(datalist_himym$doc_id, "[0-9]+"))

datalist_himym_w <- datalist_himym %>% mutate(Season = v_season, Chapter = v_chapter)

df_himym_final_doc <- full_join(as.data.frame(datalist_himym_w), df_himym_final, by = c("Season", "Chapter")) %>% 
                         mutate(Season_w = paste("Season", Season))
```

## Final dataframe to be used as a corpus text
:::::::::::::: {.columns}
::: {.column width="50%"}
```{r, echo=FALSE}
#| class-source:  font_table
#| classes:  font_table

#df_himym_final_doc %>% head(10) %>% select(-text)
rmarkdown::paged_table(df_himym_final_doc %>% select(-text))
```
:::
::: {.column width="50%"}

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

:::
::::::::::::::

# First Step: Define a corpus
:::::::::::::: {.columns}
::: {.column width="50%"}

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

:::
::: {.column width="50%"}

```{r}
#| class-source:  height_chunk4
#| classes:  height_chunk4
corp_himym <- corpus(df_himym_final_doc)  # build a new corpus from the texts

docnames(corp_himym) <- df_himym_final_doc$Title

summary(corp_himym, n = 15)
```
:::
::::::::::::::


# Matrixes of distances and similarities between chapters of the first season{style="text-align: center;"}


```{r, echo=FALSE, out.width="20%", out.height="20%"}
knitr::include_graphics("images/himym.png")
```

## Convert corpus into tokens and wrangle it {auto-animate=true auto-animate-easing="ease-in-out"}

:::::::::::::: {.columns}
::: {.column width="50%"}
```{r}
#| class-source:  width_chunk5
#| classes:  width_chunk5

corp_himym_s1 <- corpus_subset(corp_himym, Season == 1)

toks_himym_s1 <- tokens(corp_himym_s1, remove_punct = TRUE,
                        remove_separators = TRUE, 
                        remove_numbers = TRUE, 
                        remove_symbols = TRUE) %>%
  tokens_remove(stopwords("english"))

toks_himym_dm_s1 <- toks_himym_s1 %>% dfm()


tstat_simil <- textstat_simil(toks_himym_dm_s1)

tstat_dist <- textstat_dist(toks_himym_dm_s1)
```
:::
::: {.column width="50%"}
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
:::
::::::::::::::

## Similarity between episodes {auto-animate=true auto-animate-easing="ease-in-out"}

:::::::::::::: {.columns}
::: {.column width="50%"}
```{r}
#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false
#| code-fold: true

clust <- hclust(as.dist(tstat_simil))
dclust <- as.dendrogram(clust)

dclust <- reorder(dclust, 1:22)

nodePar <- list(lab.cex = 1, pch = c(NA, 19), 
                cex.axis=1.5,
                cex = 2, col = "#0080ff")

#Talk about different methods above the correlation 
par(mar=c(15,7,2,1))

plot(dclust,nodePar = nodePar,
     cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2,
     main="How I Met Your Mother Season 1",
     type = "triangle",ylim=c(0,1),
     ylab = "Similarity between episodes (correlation %)",
     edgePar = list(col = 4:7, lwd = 7:7),
     panel.first = abline(h=c(seq(.10, 1, .10)), col="grey80"))

rect.hclust(clust, k = 5, border = "#ffb1b1")


```

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

:::
::: {.column width="50%"}

```{r, echo=FALSE, fig.width=12,fig.height=12}
#| class-source:  height_chunk5
#| classes:  height_chunk5


par(mar=c(15,7,2,1))

plot(dclust,nodePar = nodePar,
     cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2,
     main="How I Met Your Mother Season 1",
     type = "triangle",ylim=c(0,1),
     ylab = "Similarity between episodes (correlation %)",
     edgePar = list(col = 4:7, lwd = 7:7),
     panel.first = abline(h=c(seq(.10, 1, .10)), col="grey80"))


rect.hclust(clust, k = 5, border = "#ffb1b1")


```
:::
::::::::::::::

## Distance between episodes (by correlation) {auto-animate=true auto-animate-easing="ease-in-out"}

:::::::::::::: {.columns}
::: {.column width="50%"}

```{r, echo=FALSE, fig.width=12,fig.height=12}
#| class-source:  height_chunk5
#| classes:  height_chunk5

tstat_dist <- textstat_dist(toks_himym_dm_s1)
clust_dist <- hclust(as.dist(tstat_dist))
dclust_dist <- as.dendrogram(clust_dist)

dclust_dist <- reorder(dclust_dist, 22:1)

nodePar_2 <- list(lab.cex = 1.2, pch = c(NA, 19), 
                cex = 1.8, col = "#ffc733")

par(mar=c(15,7,2,1))

plot(dclust_dist, nodePar = nodePar_2,
     cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2,
     main="How I Met Your Mother Season 1",
     type = "triangle",ylim=c(0,120),
     ylab = "Distance between episodes (correlation %)",
     edgePar = list(col = 18:19, lwd = 7:7),
     panel.first =abline(h=c(seq(10, 120, 10)), col="grey80"))
rect.hclust(clust_dist, k = 5, border = "#d80000")
```

:::
::: {.column width="50%"}

```{r}
#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false
#| code-fold: true

tstat_dist <- textstat_dist(toks_himym_dm_s1)
clust_dist <- hclust(as.dist(tstat_dist))
dclust_dist <- as.dendrogram(clust_dist)

dclust_dist <- reorder(dclust_dist, 22:1)

nodePar_2 <- list(lab.cex = 1.2, pch = c(NA, 19), 
                cex = 1.8, col = "#ffc733")
#tstat_dist
par(mar=c(15,7,2,1))


plot(dclust_dist, nodePar = nodePar_2,
     cex.lab=2, cex.axis=2, cex.main=2, cex.sub=2,
     main="How I Met Your Mother Season 1",
     type = "triangle",ylim=c(0,120),
     ylab = "Distance between episodes (correlation %)",
     edgePar = list(col = 18:19, lwd = 7:7),
     panel.first =abline(h=c(seq(10, 120, 10)), col="grey80"))
rect.hclust(clust_dist, k = 5, border = "#d80000")


```

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

:::
::::::::::::::

# Appearances of actors by season {style="text-align: center;" auto-animate=true auto-animate-easing="ease-in-out"}


```{r, echo=FALSE, out.width="20%", out.height="20%"}
knitr::include_graphics("images/himym.png")
```

## Characters by season {auto-animate=true auto-animate-easing="ease-in-out"}

:::::::::::::: {.columns}
::: {.column width="50%"}

```{r, echo=FALSE, fig.width=9,fig.height=7}
#| class-source:  height_chunk5
#| classes:  height_chunk5

toks_himym <- tokens(corp_himym, remove_punct = TRUE,
               remove_separators = TRUE, 
               remove_numbers = TRUE, 
               remove_symbols = TRUE) %>%
  tokens_remove(stopwords("english"))#Add additional words

df_actors <- toks_himym %>% tokens_select(c("Ted", "Marshall", "Lily", "Robin", "Barney", "Mother")) %>%
  tokens_group(groups = Season) %>% 
  dfm()


df_final_actors <-  as.data.frame(textstat_frequency(df_actors, groups = c(1:9)))

ggplot(df_final_actors, aes(x = group, y = frequency, group = feature, color = feature)) +
  geom_line() +
  geom_point() +
  ylim(0,580)
  
```

:::
::: {.column width="50%"}

```{r}

#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false

toks_himym <- tokens(corp_himym, remove_punct = TRUE,
               remove_separators = TRUE, 
               remove_numbers = TRUE, 
               remove_symbols = TRUE) %>%
  tokens_remove(stopwords("english"))#Add additional words

df_actors <- toks_himym %>% 
  tokens_select(c("Ted", "Marshall", "Lily", "Robin", "Barney", "Mother")) %>%
  tokens_group(groups = Season) %>% 
  dfm()
```


```{r}
#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false
#| code-fold: true

df_final_actors <-  as.data.frame(textstat_frequency(df_actors, groups = c(1:9)))

ggplot(df_final_actors, aes(x = group, y = frequency, group = feature, color = feature)) +
  geom_line() +
  geom_point() +
  ylim(0,580)


```




Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

:::
::::::::::::::

## Wordcloud of principal characters that appears in HIMYM {style="text-align: center;" auto-animate=true auto-animate-easing="ease-in-out"}

:::::::::::::: {.columns}
::: {.column width="50%"}



```{r}
#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false

toks_himym_characters <- tokens(corp_himym, remove_punct = TRUE,
                           remove_separators = TRUE, 
                           remove_numbers = TRUE, 
                           remove_symbols = TRUE) %>% 
  tokens_keep(c(unique(df_characters_w$name)))

dfm_general_characters <- toks_himym_characters %>%
  dfm()


textplot_wordcloud(dfm_general_characters, 
                   random_order = FALSE, 
                   rotation = 0.25,
                   min_count = 1, #Minimum frequency
                   color = RColorBrewer::brewer.pal(4, "Dark2"))

```
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
:::
::: {.column width="50%"}

```{r, echo=FALSE, fig.width=9,fig.height=7}
#| class-source:  height_chunk5
#| classes:  height_chunk5

toks_himym_characters <- tokens(corp_himym, remove_punct = TRUE,
                           remove_separators = TRUE, 
                           remove_numbers = TRUE, 
                           remove_symbols = TRUE) %>% 
  tokens_keep(c(unique(df_characters_w$name)))

dfm_general_characters <- toks_himym_characters %>%
  dfm()


textplot_wordcloud(dfm_general_characters, 
                   random_order = FALSE, 
                   rotation = 0.25,
                   min_count = 1, #Minimum frequency
                   color = RColorBrewer::brewer.pal(4, "Dark2"))
  
```


:::
::::::::::::::

## Wordcloud of secondary characters that appears in HIMYM {style="text-align: center;" auto-animate=true auto-animate-easing="ease-in-out"}

:::::::::::::: {.columns}
::: {.column width="50%"}

```{r}
#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false

toks_himym_sec_characters <- tokens(corp_himym, 
                                    remove_punct = TRUE,
                                    remove_separators = TRUE, 
                                    remove_numbers = TRUE, 
                                    remove_symbols = TRUE) %>% 
  tokens_keep(c(unique(df_characters_w$name))) %>% 
  tokens_remove(c("Ted", "Barney", "Lily", "Robin", "Marshall"))

dfm_general_sec_characters <- toks_himym_sec_characters %>%
    dfm()

textplot_wordcloud(dfm_general_sec_characters, 
                   random_order = FALSE, 
                   rotation = 0.25,
                   #comparison = TRUE,
                   labelsize = 1.5,
                   min_count = 1, #Minimum frequency
                   color = RColorBrewer::brewer.pal(8, "Spectral"))

```
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
:::
::: {.column width="50%"}

```{r, echo=FALSE, fig.width=9,fig.height=7}
#| class-source:  height_chunk5
#| classes:  height_chunk5

toks_himym_sec_characters <- tokens(corp_himym, remove_punct = TRUE,
                             remove_separators = TRUE, 
                             remove_numbers = TRUE, 
                             remove_symbols = TRUE) %>% 
  tokens_keep(c(unique(df_characters_w$name))) %>% 
  tokens_remove(c("Ted", "Barney", "Lily", "Robin", "Marshall"))

dfm_general_sec_characters <- toks_himym_sec_characters %>%
    dfm()

textplot_wordcloud(dfm_general_sec_characters, 
                   random_order = FALSE, 
                   rotation = 0.25,
                   #comparison = TRUE,
                   labelsize = 1.5,
                   min_count = 1, #Minimum frequency
                   color = RColorBrewer::brewer.pal(8, "Spectral"))
  
```


:::
::::::::::::::


## NLP {style="text-align: center;" auto-animate=true auto-animate-easing="ease-in-out"}

```{r, echo=FALSE, out.width="20%", out.height="20%"}
knitr::include_graphics("images/spacy.png")
```

<br/>
<br/>

###  free, open-source library for advanced Natural Language Processing (NLP) in Python. {style="text-align: center;" auto-animate=true auto-animate-easing="ease-in-out"}


## spaCy and spaCyr {auto-animate=true auto-animate-easing="ease-in-out"}

Explain what is spaCy and spaCyr

Remember that spaCyr is a package where we can use the amazing functions of spaCy for analysis of text. 


## Using spaCyr for our TV show {auto-animate=true auto-animate-easing="ease-in-out"}

:::::::::::::: {.columns}
::: {.column width="50%"}

```{r, eval=FALSE}
#| class-source:  width_chunk_668px
#| classes:  width_chunk_668px

library(spacyr)

spacy_install()

spacy_initialize(model = "en_core_web_sm")
```

```{r, echo=FALSE, out.width="60%", out.height="60%"}
knitr::include_graphics("images/space_init.png")
```

We will not run this piece of chunk because it takes 5 minutes. Here we are just installing from Python dependencies de package and the model.

```{r, eval=FALSE}
#| class-source:  width_chunk_668px
#| classes:  width_chunk_668px

sp_parse_doc <- spacy_parse(df_himym_final_doc, tag=TRUE)

```

:::
::: {.column width="40%"}

```{r}
#| class-source:  height_chunk
#| classes:  height_chunk

load("data/df_spaCyr_himym.Rdata")
```

<br/>

```{r, echo=FALSE}
#| class-source:  font_table
#| classes:  font_table

rmarkdown::paged_table(sp_parse_doc)
```

:::
::::::::::::::

## Wrangling data with the spaCyr output {auto-animate=true auto-animate-easing="ease-in-out"}

```{r}
#| class-source:  width_chunk_668px
#| classes:  width_chunk_668px

sp_parse_var <- full_join(sp_parse_doc, df_himym_final_doc, by = c("doc_id"))

sp_parse_var_PROPN <- sp_parse_var %>% filter(pos=="PROPN" & stringr::str_starts(entity, "PERSON_B"))

sp_parse_var_ADJ <- sp_parse_var %>% filter(pos=="ADJ")

```

Describe what we are doing here

## Get wordcloud using an spaCyr output {auto-animate=true auto-animate-easing="ease-in-out"}


:::::::::::::: {.columns}
::: {.column width="50%"}

```{r}
#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false


toks_himym_ADJ <- tokens(corp_himym, remove_punct = TRUE,
                             remove_separators = TRUE, 
                             remove_numbers = TRUE, 
                             remove_symbols = TRUE) %>% 
  tokens_keep(c(unique(sp_parse_var_ADJ$lemma))) %>%
  tokens_remove(c(stopwords("english"), "oh", "yeah", "okay", "like", 
                  "get", "got", "can", "one", "hey", "go",
                  "Ted", "Marshall", "Lily", "Robin", "Barney", "just", 
                  "know", "well", "right", "even", "see", 
                  "sure", "back", "first", "said", "maybe", "wedding", 
                  "whole", "wait"))

df_general_ADJ <- toks_himym_ADJ %>%
  tokens_group(groups = Season_w) %>%
  dfm() %>% dfm_subset(Season < 9)

textplot_wordcloud(df_general_ADJ, 
                   random_order = FALSE, 
                   rotation = 0.25,
                   comparison = TRUE,
                   labelsize = 1.5,
                   min_count = 1, #Minimum frequency
                   color = ggsci::pal_lancet(palette = "lanonc"))
                   #color = RColorBrewer::brewer.pal(10, "Spectral"))

mtext("How I Met Your Mother",
      side=1, 
      line=1.3, 
      at=1, 
      adj=-.8, 
      cex=1.2)

```
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
:::
::: {.column width="50%"}

```{r, echo=FALSE, fig.width=9,fig.height=7}
#| class-source:  height_chunk5
#| classes:  height_chunk5


toks_himym_ADJ <- tokens(corp_himym, remove_punct = TRUE,
                             remove_separators = TRUE, 
                             remove_numbers = TRUE, 
                             remove_symbols = TRUE) %>% 
  tokens_keep(c(unique(sp_parse_var_ADJ$lemma))) %>%
  tokens_remove(c(stopwords("english"), "oh", "yeah", "okay", "like", 
                  "get", "got", "can", "one", "hey", "go",
                  "Ted", "Marshall", "Lily", "Robin", "Barney", "just", 
                  "know", "well", "right", "even", "see", 
                  "sure", "back", "first", "said", "maybe", "wedding", 
                  "whole", "wait"))

df_general_ADJ <- toks_himym_ADJ %>%
  tokens_group(groups = Season_w) %>%
  dfm() %>% dfm_subset(Season < 9)

textplot_wordcloud(df_general_ADJ, 
                   random_order = FALSE, 
                   rotation = 0.25,
                   comparison = TRUE,
                   labelsize = 1.5,
                   min_count = 1, #Minimum frequency
                   color = ggsci::pal_lancet(palette = "lanonc"))
                   #color = RColorBrewer::brewer.pal(10, "Spectral"))

mtext("How I Met Your Mother",
      side=1, 
      line=1.3, 
      at=1, 
      adj=-.8, 
      cex=1.2)
  
```

:::
::::::::::::::

# Network plot {style="text-align: center;" auto-animate=true auto-animate-easing="ease-in-out"}


## How the characters are related each other? {auto-animate=true auto-animate-easing="ease-in-out"}

:::::::::::::: {.columns}
::: {.column width="50%"}

```{r, echo=FALSE, fig.width=9,fig.height=7}
#| class-source:  height_chunk5
#| classes:  height_chunk5

token_characters_himym <- tokens(corp_himym, 
                 remove_punct = TRUE,
                 remove_separators = TRUE, 
                 remove_numbers = TRUE, 
                 remove_symbols = TRUE) %>% 
  tokens_keep(c(unique(df_characters_w$name))) %>% 
  tokens_tolower() %>% 
  fcm(context = "window", window = 5, tri = FALSE)

topfeats <- stringr::str_to_sentence(names(topfeatures(token_characters_himym, 70)))

topfeats <- names(topfeatures(token_characters_himym, 70))

set.seed(100)

textplot_network(fcm_select(token_characters_himym, topfeats),
                 edge_color = "#008eed", 
                 edge_size = 2, 
                 vertex_labelcolor = "#006fba", 
                 omit_isolated = TRUE,
                 min_freq = .1)
  
```

:::
::: {.column width="50%"}

```{r, eval=FALSE}

#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false

token_characters_himym <- tokens(corp_himym, 
                 remove_punct = TRUE,
                 remove_separators = TRUE, 
                 remove_numbers = TRUE, 
                 remove_symbols = TRUE) %>% 
  tokens_keep(c(unique(df_characters_w$name))) %>% 
  tokens_tolower() %>% 
  fcm(context = "window", window = 5, tri = FALSE)

topfeats <- stringr::str_to_sentence(names(topfeatures(token_characters_himym, 70)))

topfeats <- names(topfeatures(token_characters_himym, 70))

set.seed(100)

textplot_network(fcm_select(token_characters_himym, topfeats),
                 edge_color = "#008eed", 
                 edge_size = 2, 
                 vertex_labelcolor = "#006fba", 
                 omit_isolated = TRUE,
                 min_freq = .1)
```


Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

:::
::::::::::::::

# Frequency of adjectives {style="text-align: center;" auto-animate=true auto-animate-easing="ease-in-out"}


:::::::::::::: {.columns}
::: {.column width="50%"}

```{r}
#| class-source:  width_chunk5
#| classes:  width_chunk5
#| output: false

freq_gen_dfm <- toks_himym_ADJ %>%
  dfm()

df_freq_gen_dfm <-  as.data.frame(textstat_frequency(freq_gen_dfm, n=10, groups = Season_w))



ggplot(df_freq_gen_dfm, aes(x = group, y = frequency, group = feature, color = feature)) +
  geom_line() +
  geom_point()+
  #coord_flip() +
  labs(x = NULL, y = "Frequency")

```
Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.
:::
::: {.column width="50%"}

```{r, echo=FALSE, fig.width=9,fig.height=7}
#| class-source:  height_chunk5
#| classes:  height_chunk5


freq_gen_dfm <- toks_himym_ADJ %>%
  dfm()

df_freq_gen_dfm <-  as.data.frame(textstat_frequency(freq_gen_dfm, n=10, groups = Season_w))

df_freq_gen_dfm

ggplot(df_freq_gen_dfm, aes(x = group, y = frequency, group = feature, color = feature)) +
  geom_line() +
  geom_point()+
  #coord_flip() +
  labs(x = NULL, y = "Frequency")
  
```

:::
::::::::::::::





## Quarto {auto-animate=true auto-animate-easing="ease-in-out"}

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

Quarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

## Bullets

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```
